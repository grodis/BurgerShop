@model beeftechee.Models.ApplicationUser
@{

    ViewBag.Title = "Chat";
}

<div class="container myMarginTop">
    <div class="col-lg-5 my">
        <div class="section_tittle">

            <h2>Chat</h2>
            <h3>Chat with other users!</h3>
        </div>
    </div>
</div>
<div class="container">
    <div class="col-10 border">
        <ul id="discussion" class="m-3 pt-5">

            <li>&nbsp;</li>
            <li>&nbsp;</li>
        </ul>
    </div>
    <input class="form-control col-10 mt-2" type="text" id="message" />
    <input type="button" id="sendmessage" value="Send" class="mt-4 genric-btn primary-border circle mb-4" />
    <input type="hidden" id="displayname" value="@Model.FirstName @Model.LastName" />

    @if (!String.IsNullOrWhiteSpace(Model.ImageUrl))
    {
        <img id="displayimg" src="~/Content/UserImages/@Model.ImageUrl" alt="Alternate Text" hidden />

    }
    else
    {
        <img id="displayimg" src="~/Content/UserImages/userimage.png" alt="Alternate Text" hidden />

    }
</div>




@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.2.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;

            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message, image) {
                $('#message').val('');
                // Add the message to the page.
                $('#discussion').append(`<li class='mb-2' style="word-wrap: break-word;"><img class='mr-2' style="width:35px;" src="${image}" alt="Alternate Text"/><strong>` + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };


            // Get the user name and store it to prepend to messages.
            //var usename = $('#displayname').val();
            // Set initial focus to message input box
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {

                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val(), $('#displayimg').attr('src'));

                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
                $('#message').keyup(function (e) {
                    if (e.keyCode == 13) {
                        // Call the Send method on the hub.
                        chat.server.send($('#displayname').val(), $('#message').val(), $('#displayimg').attr('src'));

                        // Clear text box and reset focus for next comment.
                        $('#message').val('').focus();
                    }
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
    <script src="~/Scripts/myForm.js"></script>
}